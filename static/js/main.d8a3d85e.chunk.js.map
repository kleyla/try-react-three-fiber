{"version":3,"sources":["components/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","softShadows","SpinningMesh","position","color","speed","args","mesh","useRef","useFrame","current","rotation","x","y","useState","expand","setExpand","props","useSpring","scale","ref","onClick","castShadow","attach","factor","App","colorManagement","shadowMap","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","Math","PI","receiveShadow","opacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAeeA,G,MAbA,WACb,OACE,mCACE,qBAAKC,UAAU,OAAf,SACE,2DAEF,qBAAKA,UAAU,UAAf,SACE,gD,uBCARC,cAEA,IAAMC,EAAe,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACxCC,EAAOC,mBACbC,aAAS,kBAAOF,EAAKG,QAAQC,SAASC,EAAIL,EAAKG,QAAQC,SAASE,GAAK,OAFZ,MAG7BC,oBAAS,GAHoB,mBAGlDC,EAHkD,KAG1CC,EAH0C,KAInDC,EAAQC,YAAU,CACtBC,MAAOJ,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,KAG3C,OACE,eAAC,IAAER,KAAH,CACEJ,SAAUA,EACViB,IAAKb,EACLc,QAAS,kBAAML,GAAWD,IAC1BI,MAAOF,EAAME,MACbG,YAAU,EALZ,UAOE,mCAAmBC,OAAO,WAAWjB,KAAMA,IAC3C,cAAC,IAAD,CACEF,MAAOA,EACPC,MAAOA,EACPkB,OAAO,WACPC,OAAQ,SAqDDC,EAhDH,WACV,OACE,qCACE,cAAC,EAAD,IACA,eAAC,IAAD,CACEC,iBAAe,EACfC,WAAS,EACTC,OAAQ,CAAEzB,SAAU,EAAE,EAAG,EAAG,IAAK0B,IAAK,IAHxC,UAKE,8BAAcC,UAAW,KACzB,kCACER,YAAU,EACVnB,SAAU,CAAC,EAAG,GAAI,GAClB2B,UAAW,IACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAEzB,4BAAYlC,SAAU,EAAE,GAAI,GAAI,IAAK2B,UAAW,KAChD,4BAAY3B,SAAU,CAAC,GAAI,GAAI,GAAI2B,UAAW,MAC9C,kCACE,uBACEnB,SAAU,EAAE2B,KAAKC,GAAK,EAAG,EAAG,GAC5BpC,SAAU,CAAC,GAAI,EAAG,GAClBqC,eAAa,EAHf,UAKE,qCAAqBjB,OAAO,WAAWjB,KAAM,CAAC,IAAK,OACnD,gCAAgBiB,OAAO,WAAWkB,QAAS,QAE7C,cAAC,EAAD,CACEtC,SAAU,CAAC,EAAG,EAAG,GACjBG,KAAM,CAAC,EAAG,EAAG,GACbF,MAAM,MACNC,MAAO,IAET,cAAC,EAAD,CAAcF,SAAU,EAAE,EAAG,GAAI,GAAIC,MAAM,SAASC,MAAO,IAC3D,cAAC,EAAD,CAAcF,SAAU,CAAC,EAAG,GAAI,GAAIC,MAAM,OAAOC,MAAO,OAG1D,cAAC,IAAD,WCpEOqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d8a3d85e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"logo\">\n        <span>REACT THREE FIVER APP</span>\n      </div>\n      <div className=\"episode\">\n        <span>Karen</span>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\nimport { softShadows, MeshWobbleMaterial, OrbitControls } from \"drei\";\n// animating\nimport { useSpring, a } from \"react-spring/three\";\n\n// soft shadows\nsoftShadows();\n\nconst SpinningMesh = ({ position, color, speed, args }) => {\n  const mesh = useRef();\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n  const [expand, setExpand] = useState(false);\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n\n  return (\n    <a.mesh\n      position={position}\n      ref={mesh}\n      onClick={() => setExpand(!expand)}\n      scale={props.scale}\n      castShadow\n    >\n      <boxBufferGeometry attach=\"geometry\" args={args} />\n      <MeshWobbleMaterial\n        color={color}\n        speed={speed}\n        attach=\"material\"\n        factor={0.6}\n      />\n    </a.mesh>\n  );\n};\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <Canvas\n        colorManagement\n        shadowMap\n        camera={{ position: [-5, 2, 10], fov: 60 }}\n      >\n        <ambientLight intensity={0.3} />\n        <directionalLight\n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.5}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        />\n        <pointLight position={[-10, 0, -20]} intensity={0.5} />\n        <pointLight position={[0, -10, 0]} intensity={1.5} />\n        <group>\n          <mesh\n            rotation={[-Math.PI / 2, 0, 0]}\n            position={[0, -3, 0]}\n            receiveShadow\n          >\n            <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n            <shadowMaterial attach=\"material\" opacity={0.3} />\n          </mesh>\n          <SpinningMesh\n            position={[0, 1, 0]}\n            args={[3, 2, 1]}\n            color=\"red\"\n            speed={2}\n          />\n          <SpinningMesh position={[-2, 1, -5]} color=\"yellow\" speed={6} />\n          <SpinningMesh position={[5, 1, -2]} color=\"pink\" speed={6} />\n        </group>\n        {/* permiten movernos */}\n        <OrbitControls />\n      </Canvas>\n    </>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}